
ultrasonic sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000186  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000662  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ba  00000000  00000000  00000886  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d3  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001114  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000368  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008e  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001562  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  74:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:
#include <stdlib.h>

int TimerOverflow = 0;

ISR(TIMER1_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	TimerOverflow++;	/* Increment Timer Overflow count */
  8a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  8e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  98:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  9c:	9f 91       	pop	r25
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <trigger_and_distance>:
}
void trigger_and_distance(){
	long count;
	double distance;
	
	PORTA |= (1 << 3);
  aa:	8b b3       	in	r24, 0x1b	; 27
  ac:	88 60       	ori	r24, 0x08	; 8
  ae:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	8a e1       	ldi	r24, 0x1A	; 26
  b2:	8a 95       	dec	r24
  b4:	f1 f7       	brne	.-4      	; 0xb2 <trigger_and_distance+0x8>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <trigger_and_distance+0xe>
	_delay_us(10);
	PORTA &= (~(1 << 3));
  b8:	8b b3       	in	r24, 0x1b	; 27
  ba:	87 7f       	andi	r24, 0xF7	; 247
  bc:	8b bb       	out	0x1b, r24	; 27
	
	TCNT1 = 0;
  be:	1d bc       	out	0x2d, r1	; 45
  c0:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0x41;
  c2:	81 e4       	ldi	r24, 0x41	; 65
  c4:	8e bd       	out	0x2e, r24	; 46
	TIFR = 1<<ICF1;
  c6:	80 e2       	ldi	r24, 0x20	; 32
  c8:	88 bf       	out	0x38, r24	; 56
	TIFR = 1<<TOV1;
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	88 bf       	out	0x38, r24	; 56

	
	while ((TIFR & (1 << ICF1)) == 0);
  ce:	08 b6       	in	r0, 0x38	; 56
  d0:	05 fe       	sbrs	r0, 5
  d2:	fd cf       	rjmp	.-6      	; 0xce <trigger_and_distance+0x24>
	TCNT1 = 0;
  d4:	1d bc       	out	0x2d, r1	; 45
  d6:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0x01;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	8e bd       	out	0x2e, r24	; 46
	TIFR = 1<<ICF1;
  dc:	80 e2       	ldi	r24, 0x20	; 32
  de:	88 bf       	out	0x38, r24	; 56
	TIFR = 1<<TOV1;
  e0:	84 e0       	ldi	r24, 0x04	; 4
  e2:	88 bf       	out	0x38, r24	; 56
	TimerOverflow = 0;
  e4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>

	while ((TIFR & (1 << ICF1)) == 0);
  ec:	08 b6       	in	r0, 0x38	; 56
  ee:	05 fe       	sbrs	r0, 5
  f0:	fd cf       	rjmp	.-6      	; 0xec <trigger_and_distance+0x42>
	count = ICR1 + (65535 * TimerOverflow);
  f2:	86 b5       	in	r24, 0x26	; 38
  f4:	97 b5       	in	r25, 0x27	; 39
  f6:	08 95       	ret

000000f8 <main>:

void trigger_and_distance();

int main(void){
	
	DDRA = 0x08;		/* Make trigger pin as output */
  f8:	88 e0       	ldi	r24, 0x08	; 8
  fa:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xFF;		/* Turn on Pull-up */
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	8b bb       	out	0x1b, r24	; 27
	
	
	sei();			
 100:	78 94       	sei
	TIMSK = (1 << TOIE1);
 102:	84 e0       	ldi	r24, 0x04	; 4
 104:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0;		
 106:	1f bc       	out	0x2f, r1	; 47

	while(1)
	{
		trigger_and_distance();
 108:	0e 94 55 00 	call	0xaa	; 0xaa <trigger_and_distance>
 10c:	fd cf       	rjmp	.-6      	; 0x108 <main+0x10>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
